/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelmanagement_beanswork;

import javax.swing.DefaultListModel;
import javax.swing.JList;


/**
 *
 * @author LambrosTzanetos
 */


public class HotelDisplayJFRAME extends javax.swing.JFrame {
    boolean displayListHasRefreshed = true;
    /**
     * Creates new form HotelDisplayJFRAME
     */

    //Stock Order, Alphabetical Order Ascending, Alphabetical Order Descending, Ratings Order Ascending, Ratings Order Descending, Pricing Order Ascending, Pricing Order Descending, Distance from City Center Order Ascending, Distance from City Center Order Descending, Distance From Seminar Order Ascending, Distance From Seminar Order Ascending
    
    public HotelDisplayJFRAME() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        hotelListDisplay = new javax.swing.JList<>();
        displayOrders = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        makeReservationButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        hotelDescriptionArea = new javax.swing.JTextArea();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        hotelListDisplay.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        hotelListDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hotelListDisplayMouseClicked(evt);
            }
        });
        hotelListDisplay.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                hotelListDisplayPropertyChange(evt);
            }
        });
        hotelListDisplay.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                hotelListDisplayValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(hotelListDisplay);

        displayOrders.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Stock Order", "Alphabetical Order Ascending", "Alphabetical Order Descending", "Ratings Order Ascending", "Ratings Order Descending", "Pricing Order Ascending", "Pricing Order Descending", "Distance From City Center Order Ascending", "Distance From City Center Order Descending" }));
        displayOrders.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                displayOrdersPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        displayOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayOrdersActionPerformed(evt);
            }
        });
        displayOrders.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                displayOrdersPropertyChange(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hotel Display");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        filterButton.setText("Filter Results");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Hotel Information"));

        makeReservationButton.setText("Make Reservation");
        makeReservationButton.setEnabled(false);
        makeReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeReservationButtonActionPerformed(evt);
            }
        });

        hotelDescriptionArea.setColumns(20);
        hotelDescriptionArea.setRows(5);
        hotelDescriptionArea.setEnabled(false);
        jScrollPane1.setViewportView(hotelDescriptionArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(1185, Short.MAX_VALUE)
                        .addComponent(makeReservationButton)))
                .addGap(3, 3, 3))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(makeReservationButton))
        );

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(displayOrders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filterButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(500, 500, 500)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 550, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displayOrders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed

            FilterFormJFRAME filter = new FilterFormJFRAME(this);
            filter.setVisible(true);
    }//GEN-LAST:event_filterButtonActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden

    }//GEN-LAST:event_formComponentHidden

    private void displayOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayOrdersActionPerformed
        Singleton.getInstance().displayOrder = (String) displayOrders.getSelectedItem();
  
        switch (Singleton.getInstance().displayOrder) {
            case "Stock Order":
                Singleton.getInstance().mainData.displayStockOrder();
                break;
            case "Alphabetical Order Ascending":
                Singleton.getInstance().mainData.displayAlphabeticalOrderAscending();
                break;
            case "Alphabetical Order Descending":
                Singleton.getInstance().mainData.displayAlphabeticalOrderDescending();
                break;
            case "Ratings Order Ascending":
                Singleton.getInstance().mainData.displayRatingsOrderAscending();
                break;
            case "Ratings Order Descending":
                Singleton.getInstance().mainData.displayRatingsOrderDescending();
                break;
            case "Pricing Order Ascending":
                Singleton.getInstance().mainData.displayPricingOrderAscending();
                break;
            case "Pricing Order Descending":
                Singleton.getInstance().mainData.displayPricingOrderDescending();
                break;
            case "Distance From City Center Order Ascending":
                Singleton.getInstance().mainData.displayDistanceFromCityOrderAscending();
                break;
            case "Distance From City Center Order Descending":
                Singleton.getInstance().mainData.displayDistanceFromCityOrderDescending();
                break;
            case "Distance From Seminar Order Ascending":
                Singleton.getInstance().mainData.displayDistanceFromSeminarOrderAscending();
                break;
            case "Distance From Seminar Order Descending":
                Singleton.getInstance().mainData.displayDistanceFromSeminarOrderDescending();
                break;
            default:
                System.out.println("Display Ordering Is Invalid");      
       }
       
        DefaultListModel dlm = new DefaultListModel();
        int counter = Singleton.getInstance().mainData.counterOfFindings;
		if (Singleton.getInstance().mainData.filteredEnabled) {
			counter = Singleton.getInstance().mainData.counterOfFilteredFindings - 1;
		}
        for(int i=0;i<= counter;i++) {
            dlm.addElement(Singleton.getInstance().mainData.hotelMap.get(Singleton.getInstance().mainData.hotelsTableIDs[1][i]).printShortListForm());
        }
        displayListHasRefreshed = false;
        hotelListDisplay.removeAll();
        hotelListDisplay.setModel(dlm);
        displayListHasRefreshed = true;
        
    }//GEN-LAST:event_displayOrdersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        if(Singleton.getInstance().mainData.seminarMode == true && (int) displayOrders.getItemCount() < 10) {           
                    displayOrders.addItem("Distance From Seminar Order Ascending");
                    displayOrders.addItem("Distance From Seminar Order Descending"); 
        }

        switch (Singleton.getInstance().displayOrder) {
            case "Stock Order":
                Singleton.getInstance().mainData.displayStockOrder();
                break;
            case "Alphabetical Order Ascending":
                Singleton.getInstance().mainData.displayAlphabeticalOrderAscending();
                break;
            case "Alphabetical Order Descending":
                Singleton.getInstance().mainData.displayAlphabeticalOrderDescending();
                break;
            case "Ratings Order Ascending":
                Singleton.getInstance().mainData.displayRatingsOrderAscending();
                break;
            case "Ratings Order Descending":
                Singleton.getInstance().mainData.displayRatingsOrderDescending();
                break;
            case "Pricing Order Ascending":
                Singleton.getInstance().mainData.displayPricingOrderAscending();
                break;
            case "Pricing Order Descending":
                Singleton.getInstance().mainData.displayPricingOrderDescending();
                break;
            case "Distance From City Center Order Ascending":
                Singleton.getInstance().mainData.displayDistanceFromCityOrderAscending();
                break;
            case "Distance From City Center Order Descending":
                Singleton.getInstance().mainData.displayDistanceFromCityOrderDescending();
                break;
            case "Distance From Seminar Order Ascending":
                Singleton.getInstance().mainData.displayDistanceFromSeminarOrderAscending();
                break;
            case "Distance From Seminar Order Descending":
                Singleton.getInstance().mainData.displayDistanceFromSeminarOrderDescending();
                break;
            default:
                System.out.println("Display Ordering Is Invalid");      
       }
       
        DefaultListModel dlm = new DefaultListModel();
        int counter = Singleton.getInstance().mainData.counterOfFindings;
		if (Singleton.getInstance().mainData.filteredEnabled) {
			counter = Singleton.getInstance().mainData.counterOfFilteredFindings - 1;
		}
        for(int i=0;i<= counter;i++) {
            dlm.addElement(Singleton.getInstance().mainData.hotelMap.get(Singleton.getInstance().mainData.hotelsTableIDs[1][i]).printShortListForm());
        }
        
        hotelListDisplay.setModel(dlm);
       
        
        //dd
    }//GEN-LAST:event_formComponentShown

    private void hotelListDisplayValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_hotelListDisplayValueChanged
        if(displayListHasRefreshed){
            makeReservationButton.setEnabled(true);
            int selectedRoomIndex = hotelListDisplay.getSelectedIndex();
             hotelDescriptionArea.setText(Singleton.getInstance().mainData.hotelMap.get(Singleton.getInstance().mainData.hotelsTableIDs[1][selectedRoomIndex]).printHotelDescriptionForm());
        }
  
    }//GEN-LAST:event_hotelListDisplayValueChanged

    private void hotelListDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hotelListDisplayMouseClicked

    }//GEN-LAST:event_hotelListDisplayMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        Singleton.getInstance().mainData.seminarMode = false;
        MainMenuJFRAME mainMenuFrame = new MainMenuJFRAME();
        mainMenuFrame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void displayOrdersPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_displayOrdersPropertyChange
        
    }//GEN-LAST:event_displayOrdersPropertyChange

    private void hotelListDisplayPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_hotelListDisplayPropertyChange

    }//GEN-LAST:event_hotelListDisplayPropertyChange

    private void makeReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeReservationButtonActionPerformed
        if(hotelListDisplay.isSelectionEmpty()) {
            System.out.println("Please Select a Hotel.");
        } else {
            int selectedRoomIndex = hotelListDisplay.getSelectedIndex();
        Singleton.getInstance().hotelID = String.valueOf(Singleton.getInstance().mainData.hotelMap.get(Singleton.getInstance().mainData.hotelsTableIDs[1][selectedRoomIndex]).getHotelID());
            ReservationJFRAME reservationFrame = new ReservationJFRAME();
            reservationFrame.setVisible(true);
        }
    }//GEN-LAST:event_makeReservationButtonActionPerformed

    private void displayOrdersPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_displayOrdersPopupMenuWillBecomeInvisible
    }//GEN-LAST:event_displayOrdersPopupMenuWillBecomeInvisible

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HotelDisplayJFRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HotelDisplayJFRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HotelDisplayJFRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HotelDisplayJFRAME.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HotelDisplayJFRAME().setVisible(true);
                
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> displayOrders;
    private javax.swing.JButton filterButton;
    private javax.swing.JTextArea hotelDescriptionArea;
    private javax.swing.JList<String> hotelListDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton makeReservationButton;
    // End of variables declaration//GEN-END:variables
}
